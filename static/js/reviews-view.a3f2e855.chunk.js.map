{"version":3,"sources":["components/MovieDetailsPage/MovieAddInfo/Reviews/Reviews.module.scss","components/MovieDetailsPage/MovieAddInfo/Reviews/Reviews.js","views/ReviewsView.js"],"names":["module","exports","Reviews","reviews","className","styles","Review","map","id","author","content","ReviewItem","Name","Content","ReviewsView","movieId","useParams","useState","setReviews","loading","setLoading","error","setError","useEffect","moviesAPI","fetchReviewMovie","then","length","catch","console","log","Error","errorContent","LoaderSpinner"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,OAAS,wBAAwB,WAAa,4BAA4B,KAAO,sBAAsB,QAAU,2B,2JCIpH,SAASC,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAChC,OACE,oBAAIC,UAAWC,IAAOC,OAAtB,SACGH,EAAQI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,qBAAaN,UAAWC,IAAOM,WAA/B,UACE,qBAAIP,UAAWC,IAAOO,KAAtB,qBAAqCH,KACrC,mBAAGL,UAAWC,IAAOQ,QAArB,SAA+BH,MAFxBF,QCAF,SAASM,IACtB,IAAQC,EAAYC,cAAZD,QAER,EAA8BE,mBAAS,MAAvC,mBAAOd,EAAP,KAAgBe,EAAhB,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,qBAAU,WACRH,GAAW,GACXI,IACGC,iBAAiBV,GACjBW,MAAK,SAAAvB,GACmB,IAAnBA,EAAQwB,QACVL,EAAS,6CAEXJ,EAAWf,GACXiB,GAAW,MAEZQ,OAAM,SAAAP,GACLQ,QAAQC,IAAIT,GACZC,EAAS,0DACTF,GAAW,QAEd,CAACL,IAGF,qCACGM,GAAS,cAACU,EAAA,EAAD,CAAOC,aAAcX,IAC9BF,GAAW,cAACc,EAAA,EAAD,IAEX9B,GAAW,cAACD,EAAD,CAASC,QAASA","file":"static/js/reviews-view.a3f2e855.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Review\":\"Reviews_Review__3l49L\",\"ReviewItem\":\"Reviews_ReviewItem__u2sZ0\",\"Name\":\"Reviews_Name__5H8Nx\",\"Content\":\"Reviews_Content__38GKm\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Reviews.module.scss';\n\nexport default function Reviews({ reviews }) {\n  return (\n    <ul className={styles.Review}>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id} className={styles.ReviewItem}>\n          <h2 className={styles.Name}>Author: {author}</h2>\n          <p className={styles.Content}>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport moviesAPI from '../api/movies-api';\n\nimport LoaderSpinner from '../components/LoaderSpinner';\nimport Error from '../components/Error';\nimport Reviews from '../components/MovieDetailsPage/MovieAddInfo/Reviews';\n\nexport default function ReviewsView() {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    moviesAPI\n      .fetchReviewMovie(movieId)\n      .then(reviews => {\n        if (reviews.length === 0) {\n          setError('We don`t have any reviews for this movie.');\n        }\n        setReviews(reviews);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.log(error);\n        setError('Whoops, something went wrong. Enter your request again');\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <Error errorContent={error} />}\n      {loading && <LoaderSpinner />}\n\n      {reviews && <Reviews reviews={reviews} />}\n    </>\n  );\n}\n"],"sourceRoot":""}